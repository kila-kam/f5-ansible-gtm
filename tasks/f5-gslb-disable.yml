---
- name: gslb wip audit and secondary member disable
  hosts: dev_f5
  connection: local
  gather_facts: true

  vars:
    wideip_responses: []
 

  tasks:
  - name: Get credentials from environment
    set_fact:
      ansible_user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}"
      ansible_password: "{{ lookup('env', 'ANSIBLE_NET_PASSWORD') }}"
    failed_when:
      - ansible_user is not defined or ansible_user == ''
      - ansible_password is not defined or ansible_password == ''
    no_log: true
    tags: audit

  - name: Validate selected_wip exists in wip_configs
    assert:
      that: "'{{ selected_wip }}' in wip_configs"
      fail_msg: "Invalid selected_wip '{{ selected_wip }}'. Available options: {{ wip_configs.keys() | list }}"
    tags: audit

  - name: Set selected WIP configuration
    set_fact:
      gslb_wip: "{{ wip_configs[selected_wip].gslb_wip }}"
      match_word: "{{ wip_configs[selected_wip].match_word }}"
    tags: audit

  - name: Debug selected WIP config
    debug:
      msg:
        - "Selected WIP: {{ selected_wip }}"
        - "gslb_wip: {{ gslb_wip }}"
        - "match_word: {{ match_word }}" 
    tags: audit

  - name: Authenticate to BIG-IP GTM
    include_role:
      name: f5_rest_login
    tags: audit

  - name: Include WideIP fetch task
    include_role: 
      name: fetch_wideip
    loop: "{{ gslb_wip }}"
    loop_control:
      label: "{{ item }}"
    vars:
      gslb_wip_item: "{{ item }}"
    tags: audit

  - name: Extract pool names from WideIP responses
    set_fact:
      pool_list: >-
        {{
          wideip_responses
          | map(attribute='json')
          | selectattr('name', 'in', gslb_wip)
          | map(attribute='pools')
          | map('first')
          | map(attribute='name')
          | list
          | unique
        }}
    tags: audit

  - name: Include pool members fetch task
    include_role:
      name: fetch_pool_members
    loop: "{{ pool_list }}"
    loop_control:
      label: "{{ item }}"
    vars:
      pool_name: "{{ item }}"
    tags: audit

  - name: Include pool stats fetch task
    include_role:
      name: fetch_pool_stats
    loop: "{{ pool_list }}"
    loop_control:
      label: "{{ item }}"
    vars:
      pool_name: "{{ item }}"
    tags: audit

  - name: show pool stat
    debug:
      var: pool_stats_responses[0].json.entries
    tags: audit

  - name: Combine pool members with availability and enabled status=
    set_fact:
      combined_pools: "{{ combined_pools | default([]) + [combined_entry] }}"
    vars:
      wip_name: "{{ gslb_wip[item] }}"
      pool_name: "{{ pool_list[item] }}"
      members: "{{ pool_members_responses[item]['json']['items'] }}"
      stats: "{{ pool_stats_responses[item].json.entries }}"
      combined_entry:
        wip: "{{ wip_name }}"
        pool: "{{ pool_name }}"
        members: >-
          {%- set enriched_members§§ = [] -%}
          {%- for member in members -%}
            {%- set stat_path = 'https://localhost/mgmt/tm/gtm/pool/a/~Common~' ~ pool_name ~ '/members/~Common~' ~ member.name ~ ':~Common~' ~ member.subPath.split(':')[0] ~ '/stats' -%}
            {%- set stat = stats.get(stat_path, {}).get('nestedStats', {}).get('entries', {}) -%}
            {%- set enriched = {
              'name': member.name,
              'device_name': member.subPath.split(':')[0],
              'availability': stat.get('status.availabilityState', {}).get('description', 'unknown'),
              'enabled': stat.get('status.enabledState', {}).get('description', 'unknown')
            } -%}
            {%- do enriched_members.append(enriched) -%}
          {%- endfor -%}
          {{ enriched_members }}
    loop: "{{ range(0, pool_list | length) | list }}"
    loop_control:
      label: "{{ pool_list[item] }}"
    tags: audit

  - name: show combined
    debug:
      var: combined_pools
    tags: audit

  - name: Initialize availability_check
    set_fact:
      availability_check: []
    tags: audit
  - name: Determine availability and disable eligibility for secondary members (loop)
    set_fact:
      availability_check: "{{ availability_check + [ new_entry ] }}"
    vars:
      new_entry: >-
        {{
          pool_item | combine({
            'both_available': (pool_item.members | selectattr('availability', 'equalto', 'available') | list | length) == 2,
            'secondary_member': (
              pool_item.members
              | selectattr('name', 'defined')
              | selectattr('name', 'search', '(?i).*' + match_word + '.*')
              | list
            )[0] | default({})
          })
        }}
    loop: "{{ combined_pools }}"
    loop_control:
      loop_var: pool_item
      label: "{{ pool_item.pool }}"
    tags: audit

  - name: debug
    debug:
      var: availability_check 
    tags: audit

  - name: Log GTM pools with eligibility for secondary member disable
    debug:
      msg: |
        Pool: {{ item.pool }}
        WIP: {{ item.wip }}
        Both Members Available: {{ item.both_available }}
        Secondary Member Found: {{ item.secondary_member.name if item.secondary_member.name is defined else 'None' }}
        Eligible for Disable: {{ 'YES' if item.both_available and (item.secondary_member.name is defined) else 'NO' }}
    loop: "{{ availability_check }}"
    loop_control:
      label: "{{ item.pool }}"
    tags: audit

  - name: Include disable member task for each eligible pool
    include_role:
      name: disable_member
    loop: "{{ availability_check }}"
    loop_control:
      label: "{{ item.pool }}"
    vars:
      current_item: "{{ item }}"
    tags: change

  - name: Include post-disable verification task
    include_role:
      name: post_disable_check
    tags: change

  - name: Assert secondary member is disabled after patch
    assert:
      that:
        - item.json.disabled == true
      fail_msg: "Secondary pool member {{ item.json.name }} in pool {{ item.json.poolName | default('unknown') }} is NOT disabled!"
      success_msg: "Confirmed secondary pool member {{ item.json.name }} is successfully disabled."
    loop: "{{ post_check_response.results }}"
    loop_control:
      label: "Validate disable: {{ item.json.name | default('unknown') }}"
    when: 
     - post_check_response is defined
     - "'json' in item"
    tags: audit