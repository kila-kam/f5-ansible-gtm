---
- name: gslb wip audit and secondary member enable
  hosts: dev_f5
  connection: local
  gather_facts: true

  vars:
    wideip_responses: []
    combined_pools: []

  tasks:

  - name: Get credentials from environment
    set_fact:
      ansible_user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}"
      ansible_password: "{{ lookup('env', 'ANSIBLE_NET_PASSWORD') }}"
    failed_when:
      - ansible_user is not defined or ansible_user == ''
      - ansible_password is not defined or ansible_password == ''
    no_log: true

  - name: Authenticate to BIG-IP GTM
    include_role:
      name: f5_rest_login

  - name: Include WideIP fetch task
    include_role: 
      name: fetch_wideip
    loop: "{{ gslb_wip }}"
    loop_control:
      label: "{{ item }}"
    vars:
      gslb_wip_item: "{{ item }}"

  - name: Extract pool names from WideIP responses
    set_fact:
      pool_list: >-
        {{
          wideip_responses
          | map(attribute='json')
          | selectattr('name', 'in', gslb_wip)
          | map(attribute='pools')
          | map('first')
          | map(attribute='name')
          | list
          | unique
        }}

  - name: Include pool members fetch task
    include_role:
      name: fetch_pool_members
    loop: "{{ pool_list }}"
    loop_control:
      label: "{{ item }}"
    vars:
      pool_name: "{{ item }}"

  - name: Include pool stats fetch task
    include_role:
      name: fetch_pool_stats
    loop: "{{ pool_list }}"
    loop_control:
      label: "{{ item }}"
    vars:
      pool_name: "{{ item }}"

  - name: Combine pool members with availability and enabled status (AAPv2-compatible)
    set_fact:
      combined_pools: "{{ combined_pools + [combined_entry] }}"
    vars:
      pool_index: "{{ item }}"
      wip_name: "{{ gslb_wip[pool_index] }}"
      pool_name: "{{ pool_list[pool_index] }}"
      members: "{{ pool_members_responses[pool_index]['json']['items'] }}"
      stats: "{{ pool_stats_responses[pool_index].json.entries }}"
      enriched_members: >-
        {{
          members | map('extract_member_status', pool_name, stats) | list
        }}
      combined_entry:
        wip: "{{ wip_name }}"
        pool: "{{ pool_name }}"
        members: "{{ enriched_members }}"
    loop: "{{ range(0, pool_list | length) | list }}"
    loop_control:
      loop_var: item

  - name: Define extract_member_status inline filter logic
    set_fact:
      extract_member_status: >-
        {% macro extract_member_status(member, pool_name, stats) -%}
          {% set device_name = member.subPath.split(':')[0] %}
          {% set stat_path = 'https://localhost/mgmt/tm/gtm/pool/a/~Common~' ~ pool_name ~ '/members/~Common~' ~ member.name ~ ':~Common~' ~ device_name ~ '/stats' %}
          {% set stat = stats.get(stat_path, {}).get('nestedStats', {}).get('entries', {}) %}
          {{
            {
              'name': member.name,
              'device_name': device_name,
              'availability': stat.get('status.availabilityState', {}).get('description', 'unknown'),
              'enabled': stat.get('status.enabledState', {}).get('description', 'unknown')
            }
          }}
        {%- endmacro %}
    delegate_to: localhost

  - name: Determine disabled secondary members for enabling
    set_fact:
      availability_check: "{{ availability_check | default([]) + [ new_entry ] }}"
    vars:
      new_entry: >-
        {{
          pool_item
          | combine({
              'secondary_member': (
                pool_item.members
                | selectattr('name', 'defined')
                | selectattr('name', 'search', '(?i).*' + match_word + '.*')
                | selectattr('enabled', 'in', ['disabled', 'false', false])
                | list
              )[0] | default({})
            })
        }}
    loop: "{{ combined_pools }}"
    loop_control:
      loop_var: pool_item
      label: "{{ pool_item.pool }}"

  - name: Log GTM pools with disabled secondary members for enabling
    debug:
      msg: |
        Pool: {{ item.pool }}
        WIP: {{ item.wip }}
        Secondary Member Found: {{ item.secondary_member.name if item.secondary_member.name is defined else 'None' }}
        Currently Enabled State: {{ item.secondary_member.enabled if item.secondary_member.enabled is defined else 'unknown' }}
        Eligible for Enable: {{ 'YES' if item.secondary_member.name is defined else 'NO' }}
    loop: "{{ availability_check }}"
    loop_control:
      label: "{{ item.pool }}"

  - name: Include enable member task
    include_role: 
      name: enable_member
    loop: "{{ availability_check }}"
    loop_control:
      label: "{{ item.pool }}"

  - name: Include post-enable verification task
    include_role: 
      name: post_enable_check

  - name: Debug post_check_response
    debug:
      var: post_check_response.results

  - name: Assert secondary member is enabled after patch
    assert:
      that:
        - (item.json.enabled | default(false)) == true
      fail_msg: "Secondary pool member {{ item.json.name }} in pool {{ item.json.poolName | default('unknown') }} is NOT enabled!"
      success_msg: "Confirmed secondary pool member {{ item.json.name }} is successfully enabled."
    loop: "{{ post_check_response.results }}"
    loop_control:
      label: "Validate enable: {{ item.json.name  | default('unknown') }}"
    when: 
     - post_check_response is defined
     - "'json' in item"
