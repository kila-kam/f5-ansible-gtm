---
- name: gslb wip audit and secondary member disable
  hosts: dev_f5
  connection: local
  gather_facts: true

  vars:
    match_word: secondary  # Keyword to identify secondary pool members
    iteration_pause_seconds: 2
    retry_count: 5
    retry_delay: 3

  tasks:
  - name: Get credentials from environment
    set_fact:
      ansible_user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}"
      ansible_password: "{{ lookup('env', 'ANSIBLE_NET_PASSWORD') }}"
    failed_when:
      - ansible_user is not defined or ansible_user == ''
      - ansible_password is not defined or ansible_password == ''
    no_log: true
    tags: audit

  - name: Authenticate to BIG-IP GTM
    include_role:
      name: f5_rest_login

  - name: Fetch WideIP info for each gslb_wip with pause and retries
    block:
      - name: Fetch WideIP info
        uri:
          url: "https://{{ ansible_host }}/mgmt/tm/gtm/wideip/a/~{{ partition }}~{{ item }}"
          method: GET
          validate_certs: false
          headers:
            X-F5-Auth-Token: "{{ bigip_auth_token }}"
        delegate_to: localhost
        register: wideip_response
        until: wideip_response.status in [200, 201]
        retries: "{{ retry_count }}"
        delay: "{{ retry_delay }}"
        failed_when: wideip_response.status not in [200, 201]
      - name: Pause for iteration gap between WideIP requests
        pause:
          seconds: "{{ iteration_pause_seconds }}"
    loop: "{{ gslb_wip }}"
    loop_control:
      label: "{{ item }}"
    register: wideip_responses

  - name: Extract pool names from WideIP responses
    set_fact:
      pool_list: >-
        {{
          wideip_responses.results
          | map(attribute='json')
          | selectattr('name', 'in', gslb_wip)
          | map(attribute='pools')
          | map('first')
          | map(attribute='name')
          | list
          | unique
        }}

  - name: Retrieve GTM pool members for each pool with pause and retries
    block:
      - name: Retrieve pool members
        uri:
          url: "https://{{ ansible_host }}/mgmt/tm/gtm/pool/a/~{{ partition }}~{{ item }}/members"
          method: GET
          validate_certs: false
          headers:
            X-F5-Auth-Token: "{{ bigip_auth_token }}"
        delegate_to: localhost
        register: pool_member_response
        until: pool_member_response.status in [200, 201]
        retries: "{{ retry_count }}"
        delay: "{{ retry_delay }}"
        failed_when: pool_member_response.status not in [200, 201]
      - name: Pause for iteration gap between pool member requests
        pause:
          seconds: "{{ iteration_pause_seconds }}"
    loop: "{{ pool_list }}"
    loop_control:
      label: "{{ item }}"
    register: pool_members_responses

  - name: Retrieve GTM pool member stats for each pool with pause and retries
    block:
      - name: Retrieve pool member stats
        uri:
          url: "https://{{ ansible_host }}/mgmt/tm/gtm/pool/a/~{{ partition }}~{{ item }}/members/stats"
          method: GET
          validate_certs: false
          headers:
            X-F5-Auth-Token: "{{ bigip_auth_token }}"
        delegate_to: localhost
        register: pool_stats_response
        until: pool_stats_response.status in [200, 201]
        retries: "{{ retry_count }}"
        delay: "{{ retry_delay }}"
        failed_when: pool_stats_response.status not in [200, 201]
      - name: Pause for iteration gap between pool member stats requests
        pause:
          seconds: "{{ iteration_pause_seconds }}"
    loop: "{{ pool_list }}"
    loop_control:
      label: "{{ item }}"
    register: pool_stats_responses

  - name: Combine pool members with availability and enabled status
    set_fact:
      combined_pools: "{{ combined_pools | default([]) + [combined_entry] }}"
    vars:
      wip_name: "{{ gslb_wip[item] }}"
      pool_name: "{{ pool_list[item] }}"
      members: "{{ pool_members_responses.results[item].json.items }}"
      stats: "{{ pool_stats_responses.results[item].json.entries }}"
      combined_entry:
        wip: "{{ wip_name }}"
        pool: "{{ pool_name }}"
        members: >-
          {%- set enriched_members = [] -%}
          {%- for member in members -%}
            {%- set stat_path = 'https://localhost/mgmt/tm/gtm/pool/a/~Common~' ~ pool_name ~ '/members/~Common~' ~ member.name ~ ':~Common~' ~ member.subPath.split(':')[0] ~ '/stats' -%}
            {%- set stat = stats.get(stat_path, {}).get('nestedStats', {}).get('entries', {}) -%}
            {%- set enriched = {
              'name': member.name,
              'device_name': member.subPath.split(':')[0],
              'availability': stat.get('status.availabilityState', {}).get('description', 'unknown'),
              'enabled': stat.get('status.enabledState', {}).get('description', 'unknown')
            } -%}
            {%- do enriched_members.append(enriched) -%}
          {%- endfor -%}
          {{ enriched_members }}
    loop: "{{ range(0, pool_list | length) | list }}"
    loop_control:
      label: "{{ pool_list[item] }}"

  - name: Determine availability and disable eligibility for secondary members
    set_fact:
      availability_check: >-
        {{
          combined_pools
          | map('combine', {
              'both_available': (item.members | selectattr('availability', 'equalto', 'available') | list | length) == 2,
              'secondary_member': (
                item.members
                | selectattr('name', 'defined')
                | selectattr('name', 'search', '(?i).*' + match_word + '.*')
                | list
              )[0] | default({})
            })
          | list
        }}

  - name: Log GTM pools with eligibility for secondary member disable
    debug:
      msg: |
        Pool: {{ item.pool }}
        WIP: {{ item.wip }}
        Both Members Available: {{ item.both_available }}
        Secondary Member Found: {{ item.secondary_member.name if item.secondary_member.name is defined else 'None' }}
        Eligible for Disable: {{ 'YES' if item.both_available and (item.secondary_member.name is defined) else 'NO' }}
    loop: "{{ availability_check }}"
    loop_control:
      label: "{{ item.pool }}"

  - name: Disable secondary GTM pool member if eligible with pause and retries
    block:
      - name: Disable secondary member
        uri:
          url: >-
            https://{{ ansible_host }}/mgmt/tm/gtm/pool/a/~{{ partition }}~{{ item.pool }}/members/~{{ partition }}~{{ item.secondary_member.device_name }}:~{{ partition }}~{{ item.secondary_member.name }}
          method: PATCH
          headers:
            X-F5-Auth-Token: "{{ bigip_auth_token }}"
            Content-Type: application/json
          validate_certs: false
          body: '{"disabled": true}'
          body_format: json
        when:
          - item.both_available
          - item.secondary_member is defined
          - item.secondary_member != {}
        register: disable_response
        until: disable_response.status in [200, 201]
        retries: "{{ retry_count }}"
        delay: "{{ retry_delay }}"
        failed_when: disable_response.status not in [200, 201]
      - name: Pause for iteration gap after disabling member
        pause:
          seconds: "{{ iteration_pause_seconds }}"
    loop: "{{ availability_check }}"
    loop_control:
      label: "{{ item.pool }}"

  - name: Post-disable verification of secondary member with retries
    uri:
      url: >-
        https://{{ ansible_host }}/mgmt/tm/gtm/pool/a/~{{ partition }}~{{ item.pool }}/members/~{{ partition }}~{{ item.secondary_member.device_name }}:~{{ partition }}~{{ item.secondary_member.name }}
      method: GET
      headers:
        X-F5-Auth-Token: "{{ bigip_auth_token }}"
        Content-Type: application/json
      validate_certs: false
    register: post_check_response
    until: post_check_response.status in [200, 201]
    retries: "{{ retry_count }}"
    delay: "{{ retry_delay }}"
    failed_when: post_check_response.status not in [200, 201]
    when:
      - item.both_available
      - item.secondary_member is defined
      - item.secondary_member != {}
    loop: "{{ availability_check }}"
    loop_control:
      label: "Post-check for {{ item.pool }}"

  - name: Assert secondary member is disabled after patch
    assert:
      that:
        - item.json.enabled == false
      fail_msg: "Secondary pool member {{ item.json.name }} in pool {{ item.json.poolName | default('unknown') }} is NOT disabled!"
      success_msg: "Confirmed secondary pool member {{ item.json.name }} is successfully disabled."
    loop: "{{ post_check_response.results }}"
    loop_control:
      label: "Validate disable: {{ item.json.name }}"
    when: post_check_response is defined
ÃŸ