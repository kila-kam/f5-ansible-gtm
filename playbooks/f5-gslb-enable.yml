---
- name: gslb wip audit and secondary member disable
  hosts: dev_f5
  connection: local
  gather_facts: true

  vars:
    wideip_responses: []
    selected_wip: auction  # default, can be overridden via -e or survey
  tasks:
  - name: Get credentials from environment
    set_fact:
      ansible_user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}"
      ansible_password: "{{ lookup('env', 'ANSIBLE_NET_PASSWORD') }}"
    failed_when:
      - ansible_user is not defined or ansible_user == ''
      - ansible_password is not defined or ansible_password == ''
    no_log: true
    tags: audit

  - name: Determine selected WIP keys
    set_fact:
      selected_keys: >-
        {{
          wip_configs.keys() | list
          if selected_wip | lower == 'all'
          else selected_wip.split(',') | map('trim') | list
        }}

  - name: Show selected keys
    debug:
      var: selected_keys

  - name: Flatten all selected gslb_wip values
    set_fact:
        gslb_wip: >-
          {{
            selected_keys
            | map('extract', wip_configs, 'gslb_wip')
            | flatten 
            | list
          }}

  - name: Show gslb wip
    debug:
      var: gslb_wip

  - name: Set match_word if only one group selected
    set_fact:
      match_word: "{{ wip_configs[selected_keys[0]].match_word }}"
    when: selected_keys | length == 1

  - name: Display selected WIPs and match_word
    debug:
       msg: |
         Selected WIPs: {{ gslb_wip }}
         Match Word: {{ match_word | default('N/A') }}


  - name: Validate selected_wip exists in wip_configs
    assert:
      that: "'{{ selected_wip }}' in wip_configs"
      fail_msg: "Invalid selected_wip '{{ selected_wip }}'. Available options: {{ wip_configs.keys() | list }}"

  - name: Set selected WIP configuration
    set_fact:
      gslb_wip: "{{ wip_configs[selected_wip].gslb_wip }}"
      match_word: "{{ wip_configs[selected_wip].match_word }}"

  - name: Debug selected WIP config
    debug:
      msg:
        - "Selected WIP: {{ selected_wip }}"
        - "gslb_wip: {{ gslb_wip }}"
        - "match_word: {{ match_word }}" 

  - name: Authenticate to BIG-IP GTM
    include_role:
      name: f5_rest_login

  - name: Include WideIP fetch task
    include_role: 
      name: fetch_wideip
    loop: "{{ gslb_wip }}"
    loop_control:
      label: "{{ item }}"
    vars:
      gslb_wip_item: "{{ item }}"

  - name: Extract pool names from WideIP responses
    set_fact:
      pool_list: >-
        {{
          wideip_responses
          | map(attribute='json')
          | selectattr('name', 'in', gslb_wip)
          | map(attribute='pools')
          | map('first')
          | map(attribute='name')
          | list
          | unique
        }}

  - name: Include pool members fetch task
    include_role: 
      name: fetch_pool_members
    loop: "{{ pool_list }}"
    loop_control:
      label: "{{ item }}"
    vars:
      pool_name: "{{ item }}"

  - name: Include pool stats fetch task
    include_role:
      name: fetch_pool_stats
    loop: "{{ pool_list }}"
    loop_control:
      label: "{{ item }}"
    vars:
      pool_name: "{{ item }}"


  - name: Combine pool members with availability and enabled status
    set_fact:
      combined_pools: "{{ combined_pools | default([]) + [combined_entry] }}"
    vars:
      wip_name: "{{ gslb_wip[item] }}"
      pool_name: "{{ pool_list[item] }}"
      members: "{{ pool_members_responses[item]['json']['items']  }}"
      stats: "{{ pool_stats_responses[item].json.entries }}"
      combined_entry:
        wip: "{{ wip_name }}"
        pool: "{{ pool_name }}"
        members: >-
          {%- set enriched_members = [] -%}
          {%- for member in members -%}
            {%- set stat_path = 'https://localhost/mgmt/tm/gtm/pool/a/~Common~' ~ pool_name ~ '/members/~Common~' ~ member.name ~ ':~Common~' ~ member.subPath.split(':')[0] ~ '/stats' -%}
            {%- set stat = stats.get(stat_path, {}).get('nestedStats', {}).get('entries', {}) -%}
            {%- set enriched = {
              'name': member.name,
              'device_name': member.subPath.split(':')[0],
              'availability': stat.get('status.availabilityState', {}).get('description', 'unknown'),
              'enabled': stat.get('status.enabledState', {}).get('description', 'unknown')
            } -%}
            {%- do enriched_members.append(enriched) -%}
          {%- endfor -%}
          {{ enriched_members }}
    loop: "{{ range(0, pool_list | length) | list }}"
    loop_control:
      label: "{{ pool_list[item] }}"



  - name: Determine disabled secondary members for enabling
    set_fact:
      availability_check: "{{ availability_check | default([]) + [ new_entry ] }}"
    vars:
      new_entry: >-
        {{
          pool_item
          | combine({
              'secondary_member': (
                pool_item.members
                | selectattr('name', 'defined')
                | selectattr('name', 'search', '(?i).*' + match_word + '.*')
                | selectattr('enabled', 'in', ['disabled', 'false', false])
                | list
              )[0] | default({})
            })
        }}
    loop: "{{ combined_pools }}"
    loop_control:
      loop_var: pool_item
      label: "{{ pool_item.pool }}"

  - name: Log GTM pools with disabled secondary members for enabling
    debug:
      msg: |
        Pool: {{ item.pool }}
        WIP: {{ item.wip }}
        Secondary Member Found: {{ item.secondary_member.name if item.secondary_member.name is defined else 'None' }}
        Currently Enabled State: {{ item.secondary_member.enabled if item.secondary_member.enabled is defined else 'unknown' }}
        Eligible for Enable: {{ 'YES' if item.secondary_member.name is defined else 'NO' }}
    loop: "{{ availability_check }}"
    loop_control:
      label: "{{ item.pool }}"
  
  - name: Include enable member task
    include_role: 
      name: enable_member
    loop: "{{ availability_check }}"
    loop_control:
      label: "{{ item.pool }}"
  
  - name: Include post-enable verification task
    include_role: 
      name: post_enable_check
    
  - name: debug
    debug:
      var: post_check_response.results

  - name: Assert secondary member is enabled after patch
    assert:
      that:
        - (item.json.enabled | default(false)) == true
      fail_msg: "Secondary pool member {{ item.json.name }} in pool {{ item.json.poolName | default('unknown') }} is NOT enabled!"
      success_msg: "Confirmed secondary pool member {{ item.json.name }} is successfully enabled."
    loop: "{{ post_check_response.results }}"
    loop_control:
      label: "Validate enable: {{ item.json.name  | default('unknown') }}"
    when: 
     - post_check_response is defined
     - "'json' in item"